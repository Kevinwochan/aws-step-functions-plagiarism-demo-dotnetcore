StartAt: Create new incident
Comment: >-
  Plagiarism state machine manages the process for student's plagiarism
  violation.
States:
  Create new incident:
    Type: Pass
    Next: Save incident
    Parameters:
      StudentId.$: $.StudentId
      IncidentDate.$: $.IncidentDate
      IncidentId.$: States.UUID()
      IncidentResolved: false
      AdminActionRequired: false
  
  Save incident:
    Type: Task
    Resource: arn:aws:states:::dynamodb:putItem
    Parameters:
      TableName: ${IncidentsTable}
      Item:
        StudentId:
          S.$: $.StudentId
        IncidentDate:
          S.$: $.IncidentDate
        IncidentId:
          S.$: $.IncidentId
        IncidentResolved:
          BOOL.$: $.IncidentResolved
        AdminActionRequired:
          BOOL.$: $.AdminActionRequired
    Next: Schedule exam
    ResultPath: null
  
  Schedule exam:
    Type: Task
    Comment: Set the next exam deadline for the student to complete the exam.
    Resource: arn:aws:states:::lambda:invoke
    Parameters:
      Payload.$: $
      FunctionName: ${ScheduleExamFunctionArn}
    Retry:
      - ErrorEquals:
          - Lambda.ServiceException
          - Lambda.AWSLambdaException
          - Lambda.SdkClientException
          - Lambda.TooManyRequestsException
        IntervalSeconds: 1
        MaxAttempts: 3
        BackoffRate: 2
    Next: Notify student
    Catch:
      - ErrorEquals:
          - StudentExceededAllowableExamRetries
        ResultPath: $.Error
        Next: Take administrative action
  
  Notify student:
    Type: Task
    Resource: "arn:aws:states:::sns:publish.waitForTaskToken"
    Parameters:
        TopicArn: '${NotificationTopic}'
        Message.$: "States.Format('{}/?IncidentId={}&ExamId={}&TaskToken={}', $.TestingCentreUrl, $.Payload.IncidentId, $.Payload.Exams[0].ExamId, $$.Task.Token)"
    Next: Has student passed exam?
  
  Has student passed exam?:
    Type: Choice
    Comment: If the student has a score less than 67, they need to reschedule
    Choices:
      - Variable: $.Exams[0].Result
        NumericEquals: 0
        Next: Resolve incident
      - Variable: $.Exams[0].Result
        NumericEquals: 1
        Next: Schedule exam
      - Variable: $.Exams[0].Result
        NumericEquals: 2
        Next: Take administrative action
  
  Take administrative action:
    Type: Task
    Comment: >-
      Take administrative action if student does not sit exam or fails all three
      attempts.
    Resource: arn:aws:states:::lambda:invoke
    Parameters:
      Payload.$: $
      FunctionName: ${Take administrative actionFunctionArn}
    Retry:
      - ErrorEquals:
          - Lambda.ServiceException
          - Lambda.AWSLambdaException
          - Lambda.SdkClientException
          - Lambda.TooManyRequestsException
        IntervalSeconds: 1
        MaxAttempts: 3
        BackoffRate: 2
    End: true

  Resolve incident:
    Type: Task
    Comment: Resolves the incident for the student.
    Resource: arn:aws:states:::lambda:invoke
    Parameters:
      Payload.$: $
      FunctionName: ${ResolveIncidentFunctionArn}
    Retry:
      - ErrorEquals:
          - Lambda.ServiceException
          - Lambda.AWSLambdaException
          - Lambda.SdkClientException
          - Lambda.TooManyRequestsException
        IntervalSeconds: 1
        MaxAttempts: 3
        BackoffRate: 2
    End: true
